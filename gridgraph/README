#
#    GridGraph README
#
#    Copyright (c) 2011 - Gary Smith
#
#    This file is part of GridGraph.
#
#    GridGraph is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    GridGraph is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with GridGraph.  If not, see <http://www.gnu.org/licenses/>.
#

GridGraph is a monitoring and visualization application for Grid Engine 6.2.
It generates a graph depiction of the activity in your cluster.  I wrote
this to give me a way to quickly glance at what was going on in my cluster.

  * Jobs are represented by rectangles containing the job number and owner.

  * Cluster nodes are represented by polygons.  Each node's polygon has a
    number of sides equal to the number of cpus/slots available
    (i.e. a 4 core node is represented by a square and an 8 core node is
    represented by an octagon).  Of course this won't work for 2 or less
    cores per node, so you might have to fudge the code a bit.  Maybe use
    a circle shape for single core nodes.

  * The edges or splines drawn between jobs and cluster nodes indicate
    which jobs are running on what nodes.  The thickness of the edges is
    an indication of how many slots the job is occupying in that node.

  * Edges are solid, dashed, or dotted depending on the job state.

  * Jobs and edges are colored by which queue they are in.

  * Cluster nodes are colored by their load, ranging from dull red at low
    load to white hot when overloaded.  Like a chromaticity scale.

  * Unused nodes are not shown in the graph.

  * A nice side effect of the way GraphViz processes a graph file is that
    the "look" of the graph does not change if everything is the same.
    Therefore, when the graph changes, something has changed in the grid.


PREREQUISITES

Obviously, SGE.  I'm running SGE 6.2u5.

You'll need to have the open source GraphViz apps (http://graphiviz.org)
installed on the server where you'll be running dograph.sh.  Most Linux
distros have a package for the GraphViz suite of apps (dot, neato, etc.).
For example, under RHEL5 just run `yum install graphviz`.

I used Python 2.6.4 for running gridgraph.py.  You at least need to install
the ElementTree package for python (http://pypi.python.org/pypi/elementtree/).

You'll also need an apache server running that supports home directory
references like http://myserver.com/~mylogin.


FILES

dograph.sh: simple shell script to continually collect XML output from
            grid engine and generate a new graph.  Copies the graph into
            your ~/public_html directory or wherever you like. I run this
            script (it loops) on the master SGE server.  The script
            assumes you've defined $SGE_ROOT and the SGE commands are in
            your path.

gridgraph.py: takes qstat and qhost XML output and creates a GraphViz
              neato file.

gridgraph.html: web page which displays the graph PNG and reloads every
                10 seconds.

qstat.xml: output from `qstat -f -u "*" -ne -xml`.  gridgraph.py expects
           to see this in its working directory. Generated by dograph.sh

qhost.xml: output from `qhost -xml`.  gridgraph.py expects to see this in
           its working directory. Generated by dograph.sh

gridgraph.png: the output from neato which is displayed by gridgraph.html


INSTALLATION

Simply unpack the tarball into a directory where you want to run it.

Edit gridgraph.html for the appropriate URL to the gridgraph.png file.

Make sure you have a ~/public_html/ directory and an Apache server that
can access it.  Place a copy of gridgraph.html in your ~/public_html dir.

Edit dograph.sh for the appropriate paths.

Edit gridgraph.py if you need to make tweaks for your specific cluster
node names.  My node names look like "hpcnode1a", "hpcnode26c", etc. but
I only display the "1a" and "26c" part in the graph to make it more
readable.  See the doJobSlots() function.

Also edit gridgraph.py with the names of your queues under doJobSlots().
By default it looks for high.q, all.q, and low.q plus a default for all
other queues.

Execute dograph.sh which will continually loop. Probably want to background it.

Check out the graph webpage http://mywebserver.com/~mylogin/gridgraph.html


CONTACT

If you have questions or comments, you can reach me at:

    garysmith@gracklewolf.com

The software is available at http://gracklewolf.com/gridgraph/

